#!/bin/bash

set -eua

CMAKE_MIN_REQUIRED=2.8.12
CMAKE_BUILD_VERSION=3.2.3

usage()
{
  echo "Usage: ecbuild [--help] [--version]"
  exit $1
}

help()
{
    cat <<EOF
USAGE:

  ecbuild [--help] [--version] [--toolchains]
  ecbuild [option...] [--] [cmake-argument...] <path-to-source>
  ecbuild [option...] [--] [cmake-argument...] <path-to-existing-build>

DESCRIPTION:

  ecbuild is a build system based on CMake, but providing a lot of macro's
  to make it easier to work with. Upon execution,
  the equivalent cmake command is printed.

  ecbuild/cmake must be called from an out-of-source build directory and
  forbids in-source builds.

SYNOPSIS:

    --help         Display this help
    --version      Display ecbuild version
    --toolchains   Display list of pre-installed toolchains (see below)


Available values for "option":

    --cmakebin=<path>
          Set which cmake binary to use. Default is 'cmake'

    --prefix=<prefix>
          Set the install path to <prefix>.
          Equivalent to cmake argument "-D CMAKE_INSTALL_PREFIX=<prefix>"

    --build=<build-type>
          Set the build-type to <build-type>.
          Equivalent to cmake argument "-D CMAKE_BUILD_TYPE=<build-type>"
          <build-type> can be any of:
             - debug : Lowest optimization level, useful for debugging
             - release : Highest optimization level, for best performance
             - bit : Highest optimization level while staying bit-reproducible
             - ...others depending on project

    --static
          Build static libraries.
          Equivalent to "-D BUILD_SHARED_LIBS=OFF"

    --dynamic
          Build dynamic libraries (usually the default).
          Equivalent to "-D BUILD_SHARED_LIBS=ON"

    --toolchain=<toolchain>
          Use a platform specific toolchain, containing settings such
          as compilation flags, locations of commonly used dependencies.
          <toolchain> can be the path to a custom toolchain file, or a
          pre-installed toolchain provided with ecbuild. For a list of
          pre-installed toolchains, run "ecbuild --toolchains".
          Equivalent to cmake argument "-DCMAKE_TOOLCHAIN_FILE=<toolchain-file>"

    --cache=<ecbuild-cache-file>    (advanced)
          A file called "ecbuild-cache.cmake" is generated during configuration.
          This file can be moved to a safe location, and specified for future
          builds to speed up checking of compiler/platform capabilities. Note
          that this is only accelerating fresh builds, as cmake internally
          caches also. Therefore this option is *not* recommended.

    --build-cmake
          Automatically download and build CMake version $CMAKE_BUILD_VERSION if the CMake
          version found does not meet the minimum requirements (version $CMAKE_MIN_REQUIRED
          is required). Requires an internet connection and may take a while.

    --dryrun
          Don't actually execute the cmake call, just print what would have
          been executed.


Available values for "cmake-argument":

    Any value that can be usually passed to cmake to (re)configure the build.
    Typically these values start with "-D".
        example:  -D ENABLE_TESTS=ON  -D ENABLE_MPI=OFF  -D ECKIT_PATH=...

    They can be explicitly separated from [option...] with a "--", for the case
    there is a conflicting option with the "cmake" executable, and the latter's
    option is requested.

------------------------------------------------------------------------

NOTE: When reconfiguring a build, it is only necessary to change the relevant
options, as everything stays cached. For example:
  > ecbuild --prefix=PREFIX .
  > ecbuild -D ENABLE_TESTS=ON .

------------------------------------------------------------------------

Compiling:

  To compile the project with <N> threads:
    > make -j<N>

  To get verbose compilation/linking output:
    > make VERBOSE=1

Testing:

  To run the project's tests
    > ctest

  Also check the ctest manual/help for more options on running tests

Installing:

  To install the project in location PREFIX with
       "--prefix=PREFIX" or
       "-D CMAKE_INSTALL_PREFIX=PREFIX"
    > make install

------------------------------------------------------------------------
ECMWF"

EOF
    exit $1
}


INSTALL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ECBUILD_MODULE_PATH=$INSTALL_DIR/../share/ecbuild/cmake
ECBUILD_MODULE_PATH=$(cd $(dirname "$ECBUILD_MODULE_PATH") && pwd -P)/$(basename "$ECBUILD_MODULE_PATH")
ADD_ECBUILD_OPTIONS="-D CMAKE_MODULE_PATH=$ECBUILD_MODULE_PATH"

version()
{
  ecbuild_version=$(cat ${ECBUILD_MODULE_PATH}/VERSION.cmake | grep ECBUILD_VERSION_STR |  perl -p -e 's/.*([\d]\.[\d]\.[\d]).*/\1/' )
  echo "ecbuild version ${ecbuild_version}"
  command -v cmake >/dev/null 2>&1 || { exit 0; }
  cmake --version | head -1
  exit 0
}

toolchains()
{
  toolchains_dir=$INSTALL_DIR/../share/ecbuild/toolchains/
  cd $toolchains_dir
  echo "Available toolchains:"
  ls | while read fname
  do
      echo "  - ${fname%%.*}"
  done
  exit 0
}

prefix()
{
  arg=$1
  path=$(cd $(dirname "$arg") && pwd -P)/$(basename "$arg")
  ADD_ECBUILD_OPTIONS="$ADD_ECBUILD_OPTIONS -D CMAKE_INSTALL_PREFIX=${path}"
}

toolchain()
{
  arg=$1
  if [ -f $arg ]; then
    toolchain_file=$arg
  else
    if [ -f $INSTALL_DIR/../share/ecbuild/toolchains/$arg.cmake ]; then
      toolchain_file=$INSTALL_DIR/../share/ecbuild/toolchains/$arg.cmake
    fi
  fi
  if [ -z ${toolchain_file+x} ]; then
    toolchains_dir=$INSTALL_DIR/../share/ecbuild/toolchains/
    toolchains_dir=$(cd $(dirname "$toolchains_dir") && pwd -P)/$(basename "$toolchains_dir")
    echo "Error:"
    echo "   Toolchain [$arg] is not valid: [$arg.cmake] cannot be"
    echo "   found in [$toolchains_dir]"
    exit 1
  else
    toolchain_file=$(cd $(dirname "$toolchain_file") && pwd -P)/$(basename "$toolchain_file")
    ADD_ECBUILD_OPTIONS="$ADD_ECBUILD_OPTIONS -D CMAKE_TOOLCHAIN_FILE=${toolchain_file}"
  fi
}

cache()
{
  arg=$1
  if [ -f $arg ]; then
    cache_file=$(cd $(dirname "$arg") && pwd -P)/$(basename "$arg")
  else
    echo "Error:"
    echo "   Cache file [$arg] is not found."
    exit 1
  fi
  ADD_ECBUILD_OPTIONS="$ADD_ECBUILD_OPTIONS -D ECBUILD_CACHE=${cache_file}"
}

if test $# -eq 0; then
    usage 1
fi

while test $# -gt 0; do

    # Split --option=value in $opt="--option" and $val="value"

    opt=""
    val=""

    case "$1" in
    --*=*)
      opt=`echo "$1" | sed 's/=.*//'`
      val=`echo "$1" | sed 's/--[_a-zA-Z0-9]*=//'`
      ;;
    --*)
      opt=$1
      ;;
    # -D*)
    #   ADD_ECBUILD_OPTIONS="$ADD_ECBUILD_OPTIONS $1"
    #   ;;
    *)
      break
      ;;
    esac

    # echo "debug opt: $opt $val"

    # Parse options
    case "$opt" in
      --help)
        help 0
  	    ;;
      --version)
        version
        ;;
      --dryrun)
        dryrun="yes"
        ;;
      --toolchains)
        toolchains
        ;;
      --cmakebin)
        cmakebin="$val"
        ;;
      --prefix)
        prefix $val
        ;;
      --build)
        ADD_ECBUILD_OPTIONS="$ADD_ECBUILD_OPTIONS -D CMAKE_BUILD_TYPE=$val"
        ;;
      --static)
        ADD_ECBUILD_OPTIONS="$ADD_ECBUILD_OPTIONS -D BUILD_SHARED_LIBS=OFF"
        ;;
      --dynamic)
        ADD_ECBUILD_OPTIONS="$ADD_ECBUILD_OPTIONS -D BUILD_SHARED_LIBS=ON"
        ;;
      --toolchain)
        toolchain $val
        ;;
      --cache)
        cache $val
        ;;
      --build-cmake)
        build_cmake="yes"
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "unknown option: $opt"
	      usage 1
        ;;
    esac
    shift
done

# If no arguments remain, set srcARG to "."
if [ $# -eq 0 ]; then
  srcARG="."
fi

src=${srcARG:=""}
cmake=${cmakebin:=cmake}
dryrun=${dryrun:=no}
build_cmake=${build_cmake:=""}
cmake_found=""
cmake_version_sufficient=""


# Check that version $1 satisfies $2
# (adapted from http://stackoverflow.com/a/4024263/396967)
version_gte() {
    [  "$2" = "$(echo -e "$1\n$2" | sort -V | head -n1)" ]
}

# Check if the cmake version is sufficient
check_cmake() {
  # Check if cmake is available
  if $(command -v $cmake >/dev/null 2>&1); then
    cmake_found="yes"
    cmake_version=$($cmake --version | head -n1 | awk '{ print $3 }')
    echo "Found CMake version $cmake_version" >& 2
    if version_gte $cmake_version $CMAKE_MIN_REQUIRED; then
      cmake_version_sufficient="yes"
    fi
  fi
}
check_cmake
# Use already built CMake if any
if [[ ! $cmake_version_sufficient && -x bin/cmake ]]; then
  cmake=bin/cmake
  check_cmake
fi

# Build CMake if requested and no sufficient version found
if [[ ! $cmake_version_sufficient && $build_cmake ]]; then
  echo "Building CMake version ${CMAKE_BUILD_VERSION} ..." >&2
  if [[ ! -r cmake-${CMAKE_BUILD_VERSION}.tar.gz ]]; then
    wget -N --continue -T 60 http://www.cmake.org/files/v${CMAKE_BUILD_VERSION:0:3}/cmake-${CMAKE_BUILD_VERSION}.tar.gz
  fi
  tar xzf cmake-${CMAKE_BUILD_VERSION}.tar.gz
  (
    mkdir -p build_cmake
    cd build_cmake
    ../cmake-${CMAKE_BUILD_VERSION}/bootstrap --prefix=.. && make && make install
  )
  cmake=bin/cmake
  check_cmake
fi

# Fail if we don't have a sufficient CMake
if [[ ! $cmake_version_sufficient ]]; then
  if [[ ! $cmake_found ]]; then
    echo "CMake is required and cannot be found in the PATH." >&2
  else
    echo "CMake version $CMAKE_MIN_REQUIRED is required but only $cmake_version was found." >&2
  fi
  echo "" >&2
  echo "  Try 'module load cmake', specify a CMake binary with --cmakebin=/path/to/cmake" >&2
  echo "  or  let ecbuild download and build CMake with the --build-cmake option." >&2
  exit 1
fi

echo ""
echo "$cmake ${ADD_ECBUILD_OPTIONS} $@ $src"
echo ""

if [ ${dryrun} == "yes" ]; then
  echo "[DRYRUN] -- not executing"
  exit 0
fi

$cmake ${ADD_ECBUILD_OPTIONS} "$@" $src
